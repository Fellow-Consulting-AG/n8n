version: 2.1

orbs:
  python: circleci/python@1.5.0
  k8s: digitalocean/k8s@0.1.1
  gcp-gcr: circleci/gcp-gcr@0.7.1
  kubernetes: circleci/kubernetes@0.11.0
  digitalocean: digitalocean/cli@0.1.1
  semantic-release: proxyco/semantic-release@4.0.0
  docker: circleci/docker@2.1.1
  slack: circleci/slack@4.4.4

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""


jobs:
  empty:
    resource_class: small
    docker:
      - image: cimg/base:2021.04
    steps:
      - run: echo << pipeline.parameters.GHA_Meta >>

# Build and push Docker image to Registry
  build-and-push:
    executor: docker/docker
    resource_class: medium
    parameters:
      tag:
        description: |
          Tag to use for image.
        type: string
      registry:
        description: |
          Registry to use for image.
        type: string
        default: registry.digitalocean.com
      image:
        description: |
          Image name.
        type: string
    environment:
      GIT_TOKEN: TOKEN
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.11

      - checkout
      - run: echo << pipeline.parameters.GHA_Meta >>
      - attach_workspace:
          at: /home/circleci/project

      - digitalocean/install
      - digitalocean/initialize:
          digitalocean-access-token: DIGITALOCEAN_ACCESS_TOKEN
      - run: doctl registry login

      - docker/build:
          image: << parameters.image >>
          registry: << parameters.registry >>
          tag: << pipeline.parameters.GHA_Meta >>
          dockerfile: docker/images/n8n-custom/Dockerfile
          use-buildkit: true
          cache_from: "<< parameters.registry >>/<< parameters.image >>:latest"
          extra_build_args: "--build-arg BUILDKIT_INLINE_CACHE=1"
      - run: docker tag << parameters.registry >>/<< parameters.image >>:<< pipeline.parameters.GHA_Meta >> << parameters.registry >>/<< parameters.image >>:<< pipeline.git.branch >>-latest

      - run: git clone https://FellowFellow:$TOKEN@github.com/Fellow-Consulting-AG/envs /home/circleci/project/envs

      - docker/push:
          image: << parameters.image >>
          registry: << parameters.registry >>
          tag: << pipeline.parameters.GHA_Meta >>
      - docker/push:
          image: << parameters.image >>
          registry: << parameters.registry >>
          tag: << pipeline.git.branch >>-latest

  deploy:
    executor: gcp-gcr/default
    # resource_class: small
    parameters:

      tag:
        description: Tag to use for image.
        type: string
      api-key:
        description: api-key
        type: string

    steps:
      - run: |
          curl -X 'POST' \
            'https://<<pipeline.git.branch >>.terraform.cloudintegration.eu/version/update_docker_version?registry=n8n&version=<< pipeline.parameters.GHA_Meta >>' \
            -H 'accept: application/json' \
            -H 'X-API-KEY: << parameters.api-key >>' \
            -d ''
          sleep 5
          curl -X 'GET' \
            'https://<<pipeline.git.branch >>.terraform.cloudintegration.eu/webhook/workflow/refresh' \
            -H 'accept: application/json' \
            -H 'X-API-KEY: << parameters.api-key >>' \
            -d ''

  deploy_prod:
    executor: gcp-gcr/default
    parameters:

      tag:
        description: Tag to use for image.
        type: string
      api-key:
        description: api-key
        type: string

    steps:
      - run: |
          curl -X 'POST' \
            'https://terraform.cloudintegration.eu/version/update_docker_version?registry=n8n&version=<< pipeline.parameters.GHA_Meta >>' \
            -H 'accept: application/json' \
            -H 'X-API-KEY: << parameters.api-key >>' \
            -d ''
          curl -X 'GET' \
            'https://terraform.cloudintegration.eu/webhook/workflow/refresh' \
            -H 'accept: application/json' \
            -H 'X-API-KEY: << parameters.api-key >>' \
            -d ''

# Create/Update Digitalocean Deployment
  deploy_k8s:
    executor: gcp-gcr/default
    parameters:
      branch:
        description: |
          Git branch -> important for k8s file
        type: string
      tag:
        description: |
          Tag to use for image.
        type: string
      cluster-name:
        description: |
          Name of the GKE cluster
        type: string
      namespace:
        description: |
          The deployment namespace.
        type: string
        default: ""
      deployment:
        description: |
          Deployment name.
        type: string
      container:
        description: |
          The deployment container including the registry and path.
        type: string

    steps:
      - checkout

      - kubernetes/install-kubectl
      - digitalocean/install
      - digitalocean/initialize:
          digitalocean-access-token: DIGITALOCEAN_ACCESS_TOKEN
      - run: doctl kubernetes cluster kubeconfig save << parameters.cluster-name >>

      - run: |

          kubectl patch deployment << parameters.deployment >> -n << parameters.namespace >> \
            --patch '{"spec":{"template":{"spec":{"containers":[{"name":"<< parameters.deployment >>", "image": "<< parameters.container >>:<< pipeline.parameters.GHA_Meta >>"}]}}}}'

          kubectl rollout restart deployment << parameters.deployment >> -n << parameters.namespace >>



workflows:
  version: 2
  display:
    jobs:
      - empty
  dev:
    when:
      and:
        - or:
          - equal: [ "dev", << pipeline.git.branch >> ]
        - equal: [ "CircleCI", << pipeline.parameters.GHA_Action >> ]
    jobs:

      # Build and push Docker image to Digitalocean Registry
      - build-and-push:
          context:
            - Digitalocean
            - GitHub
          tag: << pipeline.parameters.GHA_Meta >>
          image: cloudintegration/n8n

      - deploy:
          tag: << pipeline.parameters.GHA_Meta >>
          api-key: 8atbbjpdZJTR7s669S7si851bFayy5MhdNE21T2wqazvZhz8MBm6vzQGdxpeuLAIvgqncf1UZ6X51n31QnZprQdC5weJTv102lRSqM2iv5TZ9Pkihm3iVc9B12lZknaq
          requires:
            - build-and-push
      - deploy_k8s:
          branch: << pipeline.git.branch >>
          namespace: dev
          deployment: workflow
          tag: << pipeline.parameters.GHA_Meta >>
          context: Digitalocean
          container: registry.digitalocean.com/cloudintegration/n8n
          cluster-name: polydocs
          requires:
            - build-and-push

  stage:
    when:
      and:
        - or:
          - equal: [ "stage", << pipeline.git.branch >> ]
        - equal: [ "CircleCI", << pipeline.parameters.GHA_Action >> ]
    jobs:

      # Build and push Docker image to Digitalocean Registry
      - build-and-push:
          context:
            - Digitalocean
            - GitHub
          tag: << pipeline.parameters.GHA_Meta >>
          image: cloudintegration/n8n

      - deploy:
          tag: << pipeline.parameters.GHA_Meta >>
          api-key: UMkgUNzDoZNmlWBEBOELOGtEmd5w66UleOZIUM9JfGrM4OeAH3dDkhO1BwJhYeJ9SDMV7Ul94P4eRSK3uk4DWr42ly7aVehbwwOm6Mu0hVHzI0utlaQZqpKtLS0hBGop
          requires:
            - build-and-push

  sandbox:
    when:
      and:
        - or:
          - equal: [ "sandbox", << pipeline.git.branch >> ]
        - equal: [ "CircleCI", << pipeline.parameters.GHA_Action >> ]
    jobs:

      # Build and push Docker image to Digitalocean Registry
      - build-and-push:
          context:
            - Digitalocean
            - GitHub
          tag: << pipeline.parameters.GHA_Meta >>
          image: cloudintegration/n8n

      - deploy:
          tag: << pipeline.parameters.GHA_Meta >>
          api-key: 26CuVBsJUTfSP20KdR5jwHbOCaEHHdMzR1ZUPHHtf8voY8nXee4uh1Hr64cKIx2yBQ6mnrTNaxZXsvwLPyJTubbRm31O6kyvrShApSMrxJSl0U6XSFKlrLVA1tur7ALq
          requires:
            - build-and-push

  prod:
    when:
      and:
        - or:
          - equal: [ "prod", << pipeline.git.branch >> ]
        - equal: [ "CircleCI", << pipeline.parameters.GHA_Action >> ]
    jobs:

      # Build and push Docker image to Digitalocean Registry
      - build-and-push:
          context:
            - Digitalocean
            - GitHub
          tag: << pipeline.parameters.GHA_Meta >>
          image: cloudintegration/n8n

      - deploy_prod:
          tag: << pipeline.parameters.GHA_Meta >>
          api-key: 26CuVBsJUTfSP20KdR5jwHbOCaEHHdMzR1ZUPHHtf8voY8nXee4uh1Hr64cKIx2yBQ6mnrTNaxZXsvwLPyJTubbRm31O6kyvrShApSMrxJSl0U6XSFKlrLVA1tur7ALq
          requires:
            - build-and-push


